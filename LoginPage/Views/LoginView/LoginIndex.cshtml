@model LoginPage.Models.UserViewModel
@using System.Linq


<style>
    .task-table {
        width: 100%;
        border-collapse: collapse;
    }

    .task-table th,
    .task-table td {
        vertical-align: top;
        word-break: break-word;
        white-space: normal;
        padding: 8px;
        font-size: 14px;
    }

    .task-table th {
        background-color: #f1f1f1;
        font-weight: bold;
    }

    .task-table td:last-child {
        width: 90px;
        text-align: center;
    }
    .bg-todo {
        background-color: #ff6b6b; /* Κόκκινο */
        color: white;
    }

    .bg-inprogress {
        background-color: darkorange; /* Πορτοκαλί */
        color: white;
    }

    .bg-completed {
        background-color: #20bf6b; /* Πράσινο */
        color: white;
    }

    
</style>
@{
    var groupedTasks = Model.Tasks?
        .GroupBy(t => t.StatusName)
        .OrderBy(g => g.Key);
}

@{
ViewData["Title"] = "Welcome";
}

<div class="container mt-4">
    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h2>Welcome, @Model.CurrentUser.Name!</h2>
            <div>
                @if (Model.CurrentUser.RoleId == 1) // Admin only button
                {
                    <button id="showUsersBtn" class="btn btn-info me-2">Show Users</button>
                }
                <button id="createTaskBtn" class="btn btn-primary me-2">Create New Task</button>
                <button id="logoutBtn" class="btn btn-danger">Logout</button>
            </div>
        </div>

        <div class="card-body">
            <div class="row">
                <div class="col-md-12">
                    <div class="user-info">
                        <h4>Your Profile</h4>
                        <hr />
                        <dl class="row">
                            <dt class="col-sm-3">Name:</dt>
                            <dd class="col-sm-9">@Model.CurrentUser.Name</dd>

                            <dt class="col-sm-3">Email:</dt>
                            <dd class="col-sm-9">@Model.CurrentUser.Email</dd>

                            <dt class="col-sm-3">Role:</dt>
                            <dd class="col-sm-9">@Model.CurrentUser.RoleName</dd>
                        </dl>
                    </div>
                </div>
                
            </div>
            <div class="row mt-4">
                <div class="col-md-12">
                    @if (Model.Tasks != null && Model.Tasks.Any())
                    {
                       <h4>Tasks</h4>
                        @foreach (var group in groupedTasks)
                        {
                            string headerClass = group.Key switch
                            {
                                "ToDo" => "bg-todo",
                                "InProgress" => "bg-inprogress",
                                "Completed" => "bg-completed"
                            };
                            <div class="card mb-3">
                                <div class="card-header py-2 @headerClass">
                                    <h5 class="mb-0">@group.Key</h5>
                                </div>
                                <div class="card-body p-0">
                                    <table class="table table-sm table-bordered task-table mb-0">
                                        <thead>
                                            <tr>
                                                <th>Title</th>
                                                <th>Description</th>
                                                <th>Created At</th>
                                                <th>Updated At</th>
                                                <th>Until At</th>
                                                <th>Assign To</th>
                                                <th>Action</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var task in group)
                                            {
                                                var assignedUsers = (Model.AllUsers ?? new List<UserModel>())
                                                    .Where(u => task.UserId != null && task.UserId.Contains(u.Id.ToString()))
                                                    .ToList();

                                                <tr>
                                                    <td>@task.Title</td>
                                                    <td>@task.Description</td>
                                                    <td>@task.CreatedAt.ToString("dd/MM/yyyy")</td>
                                                    <td>@task.UpdatedAt?.ToString("dd/MM/yyyy")</td>
                                                    <td>@task.UntilAt?.ToString("dd/MM/yyyy")</td>
                                                    <td>
                                                        @if (assignedUsers.Any())
                                                        {
                                                            foreach (var user in assignedUsers)
                                                            {
                                                                <span>@user.Email<br /></span>
                                                            }
                                                        }
                                                        else
                                                        {
                                                            <span>No users assigned</span>
                                                        }
                                                    </td>
                                                    <td>
                                                        <button class="btn btn-sm btn-primary"
                                                                onclick='openEditModal(JSON.parse("@Html.Raw(System.Text.Encodings.Web.JavaScriptEncoder.Default.Encode(Json.Serialize(task).ToString()))"))'>
                                                            Edit
                                                        </button>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="card mt-3">
                            <div class="card-header py-2">
                                <h5 class="mb-0">No Tasks</h5>
                            </div>
                        </div>
                    }
                </div>
            </div>

        </div>
    </div>
</div>

@*Modal for creating a new task *@
<div class="modal fade" id="createTaskModal" tabindex="-1" aria-labelledby="createTaskModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createTaskModalLabel">Create New Task</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="createTaskForm">
                    <div class="mb-3">
                        <label for="taskTitle" class="form-label">Title</label>
                        <input type="text" class="form-control" id="taskTitle" required>
                    </div>
                    <div class="mb-3">
                        <label for="taskDescription" class="form-label">Description</label>
                        <textarea class="form-control" id="taskDescription" required></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="taskDueDate" class="form-label">Due Date</label>
                        <input type="date" class="form-control" id="taskDueDate" name="taskDueDate">
                    </div>
                    @if (Model.CurrentUser.RoleId == 1)
                    {
                        <div class="mb-3">
                            <label for="userSelect" class="form-label">Assign to User</label>
                            <select multiple="multiple" class="form-select" name="userSelect" id="userSelect">
                                <option value="" disabled>Select users</option>
                                @if(Model.AllUsers != null && Model.AllUsers.Any())
                                {
                                    @foreach (var user in Model.AllUsers)
                                    {
                                        <option value="@user.Id">@user.Name</option>
                                    }
                                }
                            </select>
                        </div>
                    }
                    
                    <button type="submit" class="btn btn-success">Create</button>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="editTaskModal" tabindex="-1" aria-labelledby="editTaskModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editTaskModalLabel">Edit Task</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editTaskForm">
                    <input type="hidden" id="editTaskId">
                    <div class="mb-3">
                        <label for="editTaskTitle" class="form-label">Title</label>
                        <input type="text" class="form-control" id="editTaskTitle" required>
                    </div>
                    <div class="mb-3">
                        <label for="editTaskDescription" class="form-label">Description</label>
                        <textarea class="form-control" id="editTaskDescription" required></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="editTaskStatus" class="form-label">Status</label>
                        <select class="form-select" id="editTaskStatus" required>
                             <option value=""></option>
                            @foreach (var status in Model.StatusList)
                            {
                                <option value="@status.Id">@status.Name</option>
                            }
                        </select>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" id="deleteTaskBtn" class="btn btn-danger me-auto">Delete Task</button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="submit" form="editTaskForm" class="btn btn-primary">Save Changes</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="otherUsersModal" tabindex="-1" aria-labelledby="otherUsersModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="otherUsersModalLabel">All Users</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <table class="table table-bordered table-striped">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Email</th>
                            <th>Role</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model.AllUsers != null)
                        {
                            @foreach (var user in Model.AllUsers)
                            {
                                if (user.Email != Model.CurrentUser.Email)
                                {
                                    <tr>
                                        <td>@user.Name</td>
                                        <td>@user.Email</td>
                                        <td>@(user.RoleName ?? "No Role")</td>
                                    </tr>
                                }
                            }
                        }
                    </tbody>
                </table>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>


@section Scripts {

    <script>
      
    const token = localStorage.getItem('token');
    if (!token && !document.cookie.includes('token=')) {
        window.location.href = '/LoginView/Login';
    }
    const userRole = '@Model.CurrentUser.RoleName';
    
    const userRoleId = @Model.CurrentUser.RoleId;

    const userDetails = {
        name: '@Model.CurrentUser.Name',
        email: '@Model.CurrentUser.Email',
        role: '@Model.CurrentUser.RoleName',
        roleId: @Model.CurrentUser.RoleId
    };
    const taskDetails = @Html.Raw(Json.Serialize(Model.Tasks)) || [];
    localStorage.setItem('tasks', JSON.stringify(taskDetails));
    localStorage.setItem('userDetails', JSON.stringify(userDetails));
    
    document.getElementById('logoutBtn').addEventListener('click', function() {
        logout();
    });

    function logout() {
        localStorage.clear();
        sessionStorage.clear();
        document.cookie = 'token=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';
        document.cookie = 'auth=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';
        window.location.href = window.location.origin + '/';
    }

    document.getElementById('createTaskBtn').addEventListener('click', function() {
        const modalElement = document.getElementById('createTaskModal');
        const modal = new bootstrap.Modal(modalElement);
        modal.show();
    });
    
    // NEW: Add event listener for the "Show Users" button if it exists
    const showUsersBtn = document.getElementById('showUsersBtn');
    if (showUsersBtn) {
        showUsersBtn.addEventListener('click', function() {
            const usersModalElement = document.getElementById('otherUsersModal');
            const usersModal = new bootstrap.Modal(usersModalElement);
            usersModal.show();
        });
    }

    document.getElementById('createTaskForm').addEventListener('submit', function(e) {
        e.preventDefault();

        const title = document.getElementById('taskTitle').value;
        const description = document.getElementById('taskDescription').value;
        const userSelect = document.getElementById('userSelect');
        const userId = "@Model.CurrentUser.Id";
        const dueDate = document.getElementById('taskDueDate').value;

        if (!title || !description) {
            alert('Please fill in title and description.');
            return;
        }
        if (userRoleId == 1 && userSelect.selectedOptions.length === 0) {
            alert('Please select at least one user to assign the task.');
            return;
        }
        let userIds = [];
        if (userRoleId == 1) {
            userIds = Array.from(userSelect.selectedOptions).map(opt => opt.value);
        } else {
            userIds = [userId];
        }

        const taskData = {
            task: {
                title: title,
                description: description,
                untilat: dueDate ? new Date(dueDate).toISOString() : null
            },
            userId: userIds
        };
        
        fetch('/api/createTaskByUser', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer ' + token
            },
            body: JSON.stringify(taskData)
        })
        .then(response => {
            if (response.ok) {
                window.location.reload();
            } else {
                response.text().then(error => { throw new Error(error); });
            }
        })
        .catch(error => {
            alert('Error creating task: ' + error.message);
        });
    })

    function openEditModal(task) {
        document.getElementById('editTaskId').value = task.id;
        document.getElementById('editTaskTitle').value = task.title;
        document.getElementById('editTaskDescription').value = task.description;
        document.getElementById('editTaskStatus').value = task.statusId;
        const modal = new bootstrap.Modal(document.getElementById('editTaskModal'));
        modal.show();
    }

    document.getElementById('editTaskForm').addEventListener('submit', function (e) {
        e.preventDefault();
        const taskId = document.getElementById('editTaskId').value;
        const title = document.getElementById('editTaskTitle').value;
        const description = document.getElementById('editTaskDescription').value;
        const statusId = document.getElementById('editTaskStatus').value;
        const taskData = {
           task:{
               id: taskId,
               title: title,
               description: description,
               statusId: parseInt(statusId),
           },
            userId: []
        };

        fetch(`/api/updateTask/${taskId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer ' + token
            },
            body: JSON.stringify(taskData)
        })
            .then(response => {
                if (!response.ok) throw new Error('Failed to update task');
                location.reload();
            })
            .catch(error => {
                alert('Error updating task: ' + error.message);
            });
    });

    document.getElementById('deleteTaskBtn').addEventListener('click', function () {
        const taskId = document.getElementById('editTaskId').value;
        if (!taskId) {
            alert('Could not find Task ID.');
            return;
        }

        if (confirm('Are you sure you want to delete this task?')) {
            fetch(`/api/deleteTask/${taskId}`, {
                method: 'DELETE',
                headers: {
                    'Authorization': 'Bearer ' + token
                }
            })
            .then(response => {
                if (response.ok) {
                    const editModal = bootstrap.Modal.getInstance(document.getElementById('editTaskModal'));
                    if (editModal) {
                        editModal.hide();
                    }
                    location.reload();
                } else {
                    response.text().then(error => { throw new Error(error || 'Server responded with an error'); });
                }
            })
            .catch(error => {
                alert('Error deleting task: ' + error.message);
            });
        }
    });

    </script>
}